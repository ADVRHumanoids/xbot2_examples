## XBotInterface related configs

XBotInterface:
  urdf_path: $PWD/teleop_fixed_base.urdf
  srdf_path: $PWD/teleop_fixed_base.srdf

ModelInterface:
  model_type: RBDL
  is_model_floating_base: false
  

## XBot2 related configuration

# describe the robot hardware in terms of devices
xbotcore_devices:

    joint_gz:
        names: []  # autodetect joints from gazebo
        thread: rt_main  # allocate this device on rt_main thread


# define threads to be created
xbotcore_threads:
    rt_main:  {sched: fifo , prio: 60, period: 0.001, core_id: 2}
    nrt_main: {sched: other, prio: 0 , period: 0.005}


# define plugins to be loaded
xbotcore_plugins:

    # this plugin is shipped with xbot2, and it generates the
    # ROS api for the framework
    # it is not designed to be real-time safe, so it must executed
    # inside a thread with `other` priority
    ros_io: {thread: nrt_main, type: ros_io}

    # the ros_control plugin forwards all references received on the
    # ROS topic /xbotcore/command to the motors
    ros_ctrl: {thread: nrt_main, type: ros_control}


    # notice that you can reuse the same plugin, by providing
    # different names and possibly different parameters
    homing:
        thread: rt_main
        type: homing_example
        params:
            time: {value: 3.0, type: double}

    gcomp_example:
        type: gcomp_example
        thread: rt_main
        params:
            enabled_chains:
                value: [arm]
                type: vector<string>


# additional parameters that don't relate to any plugin 
xbotcore_param:
    /xbot/hal/joint_safety/filter_autostart: {value: true, type: bool}  # autostart joint filter
    /xbot/hal/joint_safety/filter_cutoff_hz: {value: 2.0, type: double}    # set default filter bandwidth
    /xbot_internal/ros_io/call_timeout: {value: 1.0, type: chrono}
    /rt_slow/memory_hooks: {value: false, type: bool}
        
        
